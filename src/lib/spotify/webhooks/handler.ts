import { WebhookService } from '@/lib/webhooks/service';
import { analyticsService } from '@/lib/firebase/services/analytics';
import { AppError } from '@/lib/error/AppError';
import type { SpotifyWebhookPayload } from './types';
import { spotifyAuthService } from '../services/auth';

export class SpotifyWebhookHandler {
  constructor(
    private readonly webhookService = new WebhookService(),
    private readonly spotifyAuth = spotifyAuthService
  ) {}

  async handleWebhook(
    webhookId: string,
    payload: SpotifyWebhookPayload
  ): Promise<void> {
    try {
      switch (payload.eventType) {
        case 'spotify.auth.linked':
          await this.handleAuthLinked(payload);
          break;
        case 'spotify.auth.revoked':
          await this.handleAuthRevoked(payload);
          break;
        case 'spotify.playback.started':
        case 'spotify.playback.ended':
          await this.handlePlaybackEvent(webhookId, payload);
          break;
        default:
          throw new AppError({
            code: 'INVALID_WEBHOOK',
            message: 'Unsupported Spotify webhook event type',
            context: { eventType: payload.eventType }
          });
      }

      analyticsService.trackEvent('spotify_webhook_handled', {
        eventType: payload.eventType,
        userId: payload.userId,
        timestamp: payload.timestamp
      });
    } catch (error) {
      analyticsService.trackError(error, {
        context: 'spotify_webhook_handler',
        payload
      });
      throw error;
    }
  }

  private async handleAuthLinked(payload: SpotifyWebhookPayload): Promise<void> {
    const { userId, data } = payload;
    if (data.phoneNumber) {
      // Link Spotify auth with phone number if provided
      await this.spotifyAuth.linkPhoneNumber(userId, data.phoneNumber);
    }
  }

  private async handleAuthRevoked(payload: SpotifyWebhookPayload): Promise<void> {
    const { userId } = payload;
    await this.spotifyAuth.revokeAccess(userId);
  }

  private async handlePlaybackEvent(
    webhookId: string,
    payload: SpotifyWebhookPayload
  ): Promise<void> {
    // Forward playback events to registered webhooks
    await this.webhookService.deliverWebhook(webhookId, {
      eventType: payload.eventType,
      timestamp: payload.timestamp,
      data: payload.data,
      signature: '' // Will be generated by WebhookService
    });
  }
} 